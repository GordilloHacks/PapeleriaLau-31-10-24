/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import com.mysql.jdbc.Statement;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author Andres Gordillo
 */
public class Papeleria extends javax.swing.JFrame {

    /**
     * Creates new form Papeleria
     */
    public Papeleria() {
        initComponents();
        setLocationRelativeTo(null); 
        mostrarDatosEnTabla();
         Data(jLabel2);
         sumarColumnas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldCategoria = new javax.swing.JTextField();
        jTextFieldCosto = new javax.swing.JTextField();
        jTextFieldProducto = new javax.swing.JTextField();
        jTextFieldPrecioVenta = new javax.swing.JTextField();
        jTextFieldCantidad = new javax.swing.JTextField();
        jTextFieldDistribuidor = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel1.setText(" Papeleria ambiental");

        jTextField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar dato:"));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control Accesorios:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jTextFieldCategoria.setBorder(javax.swing.BorderFactory.createTitledBorder("Categoria:"));
        jTextFieldCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCategoriaActionPerformed(evt);
            }
        });

        jTextFieldCosto.setBorder(javax.swing.BorderFactory.createTitledBorder("Costo_Unitario:"));
        jTextFieldCosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCostoActionPerformed(evt);
            }
        });
        jTextFieldCosto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCostoKeyReleased(evt);
            }
        });

        jTextFieldProducto.setBorder(javax.swing.BorderFactory.createTitledBorder("Producto:"));

        jTextFieldPrecioVenta.setBorder(javax.swing.BorderFactory.createTitledBorder("Precio_Venta:"));
        jTextFieldPrecioVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPrecioVentaActionPerformed(evt);
            }
        });
        jTextFieldPrecioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPrecioVentaKeyReleased(evt);
            }
        });

        jTextFieldCantidad.setBorder(javax.swing.BorderFactory.createTitledBorder("Cantidad:"));
        jTextFieldCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCantidadActionPerformed(evt);
            }
        });

        jTextFieldDistribuidor.setBorder(javax.swing.BorderFactory.createTitledBorder("Distribuidor:"));
        jTextFieldDistribuidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDistribuidorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldDistribuidor, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldProducto)
                    .addComponent(jTextFieldPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextFieldDistribuidor))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Actualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/image/hacia-atras.png"))); // NOI18N
        jButton3.setText("Volver Atras");
        jButton3.setContentAreaFilled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Hora&Fecha");
        jLabel2.setAutoscrolls(true);

        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estadistica Panel:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Total Venta:");

        jLabel4.setForeground(new java.awt.Color(0, 204, 51));
        jLabel4.setText("Total Cantidad:");

        jLabel5.setForeground(new java.awt.Color(51, 102, 255));
        jLabel5.setText("Total Gastos:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "ID", "Categoria", "Producto", "Cantidad", "Cost_uni", "Precio_venta", "Total_Gasto", "Descripcion"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton5.setBackground(new java.awt.Color(204, 204, 255));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton5.setText("Recalcular Valores");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(220, 220, 220)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton3)
                    .addComponent(jLabel2))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton1))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

public void mostrarDatosEnTabla() {
    // Agregamos la nueva columna "Total_Venta"
    String[] columnas = {"ID", "FechaHora", "Categoria", "Distribuidor", "Producto", "Cantidad", "Costo_Unitario", "Precio_Venta", "Total_Gasto", "Total_Venta", "Descripcion"};
    DefaultTableModel modeloTabla = new DefaultTableModel(null, columnas);

    String url = "jdbc:mysql://localhost:3306/base_papeleria";
    String user = "root";
    String password = "";

    // Usar try-with-resources para asegurar que los recursos se cierran automáticamente
    try (Connection con = DriverManager.getConnection(url, user, password);
         Statement st = (Statement) con.createStatement();
         ResultSet rs = st.executeQuery("SELECT * FROM tabla1")) {

        // Recorremos los resultados de la consulta
        while (rs.next()) {
            String id = rs.getString("ID");
            String fechaHora = rs.getString("FechaHora");
            String categoria = rs.getString("Categoria");
            String distribuidor = rs.getString("Distribuidor");
            String producto = rs.getString("Producto");
            String cantidad = rs.getString("Cantidad");
            String costo = rs.getString("Costo");
            String precioVenta = rs.getString("Precio_Venta");
            String totalGasto = rs.getString("Total_Gasto");
            String totalVenta = rs.getString("Total_Venta");
            String descripcion = rs.getString("Descripcion");

            // Añadir la fila al modelo de tabla
            String[] fila = {id, fechaHora, categoria, distribuidor, producto, cantidad, costo, precioVenta, totalGasto, totalVenta, descripcion};
            modeloTabla.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + e.getMessage());
    }

    // Finalmente, establecer el modelo de la tabla después de cargar todos los datos
    jTable1.setModel(modeloTabla);
    
    // Definir el renderizador personalizado para la columna "Cantidad"
    jTable1.getColumnModel().getColumn(5).setCellRenderer(new CustomRenderer());

    sumarColumnas();  // Llamada para sumar columnas como 'Total_Venta' y 'Cantidad'
}

// Clase para el renderizado personalizado basado en la cantidad
class CustomRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        // Llamamos al método original para obtener el componente de celda
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        // Verificamos que el valor sea numérico antes de aplicar el formato
        if (value != null) {
            try {
                int cantidad = Integer.parseInt(value.toString());

                // Aplicamos el color según las condiciones
                if (cantidad < 5) {
                    c.setBackground(Color.RED);  // Menos de 5 en rojo
                } else if (cantidad >= 5 && cantidad <= 10) {
                    c.setBackground(Color.ORANGE);  // Entre 5 y 10 en naranja
                } else {
                    c.setBackground(Color.WHITE);  // Más de 10, color normal (blanco)
                }
            } catch (NumberFormatException e) {
                // Manejar el caso en que el valor no sea un número
                c.setBackground(Color.WHITE);
            }
        }
        return c;
    }
}


 // Función para recalcular el Total_Gasto y Total_Venta en todas las filas de la jTable1
public void recalcularTotales() {
    // Obtener el número de filas en la jTable1
    int rowCount = jTable1.getRowCount();

    // Recorrer todas las filas
    for (int i = 0; i < rowCount; i++) {
        // Obtener el valor de la columna 'Cantidad' (suponiendo que es la columna 5)
        String cantidadStr = jTable1.getValueAt(i, 5).toString();

        // Obtener el valor de la columna 'Costo' (suponiendo que es la columna 6)
        String costoStr = jTable1.getValueAt(i, 6).toString();

        // Obtener el valor de la columna 'Precio_Venta' (suponiendo que es la columna 7)
        String precioVentaStr = jTable1.getValueAt(i, 7).toString();

        // Calcular el nuevo Total_Gasto
        String totalGastoFormateado = calcularTotalGasto(cantidadStr, costoStr);

        // Calcular el nuevo Total_Venta
        String totalVentaFormateado = calcularTotalVenta(cantidadStr, precioVentaStr);

        // Actualizar el Total_Gasto en la tabla (suponiendo que es la columna 8)
        jTable1.setValueAt(totalGastoFormateado, i, 8);

        // Actualizar el Total_Venta en la tabla (suponiendo que es la columna 9)
        jTable1.setValueAt(totalVentaFormateado, i, 9);
    }

    JOptionPane.showMessageDialog(null, "El Total_Gasto y Total_Venta han sido recalculados en todas las filas.");
}

// Función para recalcular el Total_Gasto y Total_Venta en todas las filas de la jTable1 y actualizar en la base de datos
public void recalcularTotalesYActualizarBD() {
    
    System.out.println("recalcularTotalesYActualizarBD");
    // Obtener el número de filas en la jTable1
    int rowCount = jTable1.getRowCount();

    // Conexión a la base de datos
    Connection con = null;
    PreparedStatement pst = null;

    try {
        // Conectar a la base de datos
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

        // Recorrer todas las filas
        for (int i = 0; i < rowCount; i++) {
            // Obtener el ID de la fila (suponiendo que está en la columna 0)
            String id = jTable1.getValueAt(i, 0).toString();

            // Obtener los demás valores de la fila
            String fechaHora = jTable1.getValueAt(i, 1).toString();
            String categoria = jTable1.getValueAt(i, 2).toString();
            String distribuidor = jTable1.getValueAt(i, 3).toString();
            String producto = jTable1.getValueAt(i, 4).toString();
            String cantidadStr = jTable1.getValueAt(i, 5).toString();
            String costoStr = jTable1.getValueAt(i, 6).toString();
            String precioVentaStr = jTable1.getValueAt(i, 7).toString();

            // Calcular el nuevo Total_Gasto
            String totalGastoFormateado = calcularTotalGasto(cantidadStr, costoStr);

            // Calcular el nuevo Total_Venta
            String totalVentaFormateado = calcularTotalVenta(cantidadStr, precioVentaStr);

            // Actualizar el Total_Gasto y Total_Venta en la tabla
            jTable1.setValueAt(totalGastoFormateado, i, 8);
            jTable1.setValueAt(totalVentaFormateado, i, 9);

            // SQL para actualizar los datos en la base de datos
            String sql = "UPDATE tabla1 SET FechaHora = ?, Categoria = ?, Distribuidor = ?, Producto = ?, Cantidad = ?, Costo = ?, Precio_Venta = ?, Total_Gasto = ?, Total_Venta = ? WHERE ID = ?";
            pst = con.prepareStatement(sql);

            // Asignar los nuevos valores a la consulta SQL
            pst.setString(1, fechaHora);
            pst.setString(2, categoria);
            pst.setString(3, distribuidor);
            pst.setString(4, producto);
            pst.setString(5, cantidadStr);
            pst.setString(6, costoStr);
            pst.setString(7, precioVentaStr);
            pst.setString(8, totalGastoFormateado);
            pst.setString(9, totalVentaFormateado);
            pst.setString(10, id); // Usar ID como identificador único para la actualización

            // Ejecutar la actualización
            pst.executeUpdate();
        }

        JOptionPane.showMessageDialog(null, "Los totales han sido recalculados y actualizados en la base de datos correctamente.");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al actualizar los datos en la base de datos: " + e.getMessage());
    } finally {
        try {
            if (pst != null) pst.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cerrar la conexión: " + e.getMessage());
        }
    }
    sumarColumnas();
}

 
private String calcularTotalGasto(String cantidadStr, String costoStr) {
    try {
        // Parsear cantidad y costo, eliminando posibles comas o puntos innecesarios en el costo
        int cantidad = Integer.parseInt(cantidadStr);
        double costo = Double.parseDouble(costoStr.replace(".", "").replace(",", "."));

        // Calcular el total de gasto
        double totalGasto = cantidad * costo;

        // Formatear el total de gasto en miles sin decimales cuando no son necesarios
        return String.format("%,.0f", totalGasto).replace(",", ".");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error al calcular el total de gasto: " + e.getMessage());
        return "0"; // Valor por defecto en caso de error
    }
}

private String calcularTotalVenta(String cantidadStr, String precioVentaStr) {
    try {
        // Parsear cantidad y precio de venta
        int cantidad = Integer.parseInt(cantidadStr);
        double precioVenta = Double.parseDouble(precioVentaStr.replace(".", "").replace(",", "."));

        // Calcular el total de venta
        double totalVenta = cantidad * precioVenta;

        // Formatear el total de venta en miles sin decimales cuando no son necesarios
        return String.format("%,.0f", totalVenta).replace(",", ".");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error al calcular el total de venta: " + e.getMessage());
        System.out.println("Error:"+e.getMessage());
        return "0"; // Valor por defecto en caso de error
    }
}

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
   
         // Datos a guardar 
    String categoria = jTextFieldCategoria.getText();
    String distribuidor = jTextFieldDistribuidor.getText(); 
    String producto = jTextFieldProducto.getText();
    String cantidadStr = jTextFieldCantidad.getText(); 
    String costoStr = jTextFieldCosto.getText(); 
    String precioVenta = jTextFieldPrecioVenta.getText(); 
    String fechaHora = jLabel2.getText(); 

    // Validar los datos antes de proceder
    if (categoria.isEmpty() || distribuidor.isEmpty() || producto.isEmpty() || 
        cantidadStr.isEmpty() || costoStr.isEmpty() || precioVenta.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Todos los campos deben ser llenados.");
        return;
    }

    // Calcular Total_Gasto y Total_Venta
    String totalGastoFormateado = calcularTotalGasto(cantidadStr, costoStr);
    String totalVentaFormateado = calcularTotalVenta(cantidadStr, precioVenta);

    // Pedir detalle del producto
    String descripcion = JOptionPane.showInputDialog("Ingrese un detalle para el producto:");
    if (descripcion == null || descripcion.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Debe ingresar un detalle.");
        return;
    }

    Connection con = null;
    PreparedStatement pst1 = null;

    try {
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

        // Insertar en tabla1
        String sql1 = "INSERT INTO tabla1 (FechaHora, Categoria, Distribuidor, Producto, Cantidad, Costo, Precio_Venta, Total_Gasto, Total_Venta, Descripcion) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        pst1 = con.prepareStatement(sql1);
        pst1.setString(1, fechaHora);
        pst1.setString(2, categoria);
        pst1.setString(3, distribuidor);
        pst1.setString(4, producto);
        pst1.setInt(5, Integer.parseInt(cantidadStr));
        pst1.setString(6, costoStr);
        pst1.setString(7, precioVenta);
        pst1.setString(8, totalGastoFormateado);
        pst1.setString(9, totalVentaFormateado);
        pst1.setString(10, descripcion);
        pst1.executeUpdate();

        JOptionPane.showMessageDialog(null, "Datos guardados correctamente en tabla1.");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar los datos: " + e.getMessage());
    } finally {
        try {
            if (pst1 != null) pst1.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cerrar la conexión: " + e.getMessage());
        }
    }

    // Actualizar la tabla principal (solo tabla1)
    mostrarDatosEnTabla();
        
    }//GEN-LAST:event_jButton1ActionPerformed

  
       public static void Data(JLabel jLabel2) {
       // Crear un formateador de fecha y hora en formato de 12 horas con segundos
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm:ss a | dd/MM/yyyy");

        // Definir una tarea que actualiza el JLabel
        ActionListener actualizarHora = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener la hora y fecha actual del sistema
                LocalDateTime now = LocalDateTime.now();
                String formattedDateTime = now.format(formatter);

                // Actualizar el texto de jLabel2
                jLabel2.setText(formattedDateTime);
            }
        };

        // Crear un Timer que se dispare cada 1000 ms (1 segundo)
        Timer timer = new Timer(1000, actualizarHora);

        // Ejecutar inmediatamente la primera actualización
        actualizarHora.actionPerformed(null);

        // Iniciar el Timer
        timer.start();
    }
    
    
    
    private void jTextFieldCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCategoriaActionPerformed

    private void jTextFieldPrecioVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPrecioVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrecioVentaActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      
        Menu menu = new Menu();
        menu.setVisible(true); // Mostrar el nuevo frame
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
    // Verificar si hay una fila seleccionada  
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Por favor, selecciona un registro de la tabla para actualizar.");
        return;
    }

    // Obtener el ID y los datos de los campos
    String id = jTable1.getValueAt(selectedRow, 0).toString();
    String categoria = jTextFieldCategoria.getText();
    String distribuidor = jTextFieldDistribuidor.getText();
    String producto = jTextFieldProducto.getText();
    String cantidadStr = jTextFieldCantidad.getText();
    String costoStr = jTextFieldCosto.getText();
    String precioVentaStr = jTextFieldPrecioVenta.getText();
    String fechaHora = jLabel2.getText(); // Obtener la fecha y hora

    // Validar campos vacíos
    if (camposVacios(categoria, distribuidor, producto, cantidadStr, costoStr, precioVentaStr)) {
        JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos antes de actualizar.");
        return;
    }

    // Validar que los campos numéricos sean correctos
    if (!esNumerico(cantidadStr) || !esNumerico(costoStr) || !esNumerico(precioVentaStr)) {
        JOptionPane.showMessageDialog(null, "Cantidad, Costo y Precio Venta deben ser valores numéricos.");
        return;
    }

    // Calcular los Totales
    String totalGastoFormateado = calcularTotalGasto(cantidadStr, costoStr);
    String totalVentaFormateado = calcularTotalVenta(cantidadStr, precioVentaStr);

    // Configurar conexión y consultas
    String url = "jdbc:mysql://localhost:3306/base_papeleria";
    String usuario = "root";
    String contraseña = "";

    String sqlUpdateTabla1 = "UPDATE tabla1 SET FechaHora = ?, Categoria = ?, Distribuidor = ?, Producto = ?, " +
                             "Cantidad = ?, Costo = ?, Precio_Venta = ?, Total_Gasto = ?, Total_Venta = ? WHERE ID = ?";

    String sqlUpdateEntrada = "UPDATE tablaentrada SET Cant_Entrada = Cant_Entrada + ? WHERE Producto = ?";

    try (Connection con = DriverManager.getConnection(url, usuario, contraseña);
         PreparedStatement pstUpdateTabla1 = con.prepareStatement(sqlUpdateTabla1);
         PreparedStatement pstUpdateEntrada = con.prepareStatement(sqlUpdateEntrada)) {

        // Actualizar los datos en `tabla1`
        pstUpdateTabla1.setString(1, fechaHora);
        pstUpdateTabla1.setString(2, categoria);
        pstUpdateTabla1.setString(3, distribuidor);
        pstUpdateTabla1.setString(4, producto);
        pstUpdateTabla1.setString(5, cantidadStr);
        pstUpdateTabla1.setString(6, costoStr);
        pstUpdateTabla1.setString(7, precioVentaStr);
        pstUpdateTabla1.setString(8, totalGastoFormateado);
        pstUpdateTabla1.setString(9, totalVentaFormateado);
        pstUpdateTabla1.setString(10, id);

        int updatedRowsTabla1 = pstUpdateTabla1.executeUpdate();

        if (updatedRowsTabla1 > 0) {
            JOptionPane.showMessageDialog(null, "Datos actualizados correctamente en tabla1.");
            actualizarFilaTabla(selectedRow, fechaHora, categoria, distribuidor, producto, 
                                cantidadStr, costoStr, precioVentaStr, totalGastoFormateado, totalVentaFormateado);

            // Actualizar `Cant_Entrada` en `tablaentrada`
            pstUpdateEntrada.setString(1, cantidadStr);
            pstUpdateEntrada.setString(2, producto);

            int updatedRowsEntrada = pstUpdateEntrada.executeUpdate();

            if (updatedRowsEntrada > 0) {
                JOptionPane.showMessageDialog(null, "Cantidad de entrada actualizada correctamente en tablaentrada.");
            } else {
                JOptionPane.showMessageDialog(null, "El producto no se encontró en tablaentrada.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el registro para actualizar en tabla1.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al actualizar los datos: " + e.getMessage());
    }

    // Actualizar la tabla para reflejar los cambios
    mostrarDatosEnTabla();
    }//GEN-LAST:event_jButton2ActionPerformed


// Validar si hay campos vacíos
private boolean camposVacios(String... campos) {
    for (String campo : campos) {
        if (campo.isEmpty()) return true;
    }
    return false;
}

// Validar si los valores son numéricos
private boolean esNumerico(String str) {
    try {
        Double.parseDouble(str);
        return true;
    } catch (NumberFormatException e) {
        return false;
    }
}

// Actualizar los valores en la tabla
private void actualizarFilaTabla(int fila, String... valores) {
    for (int i = 0; i < valores.length; i++) {
        jTable1.setValueAt(valores[i], fila, i + 1);
    }
}
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
             // Obtener el índice de la fila seleccionada
    int selectedRow = jTable1.getSelectedRow();

    // Verificar si se ha seleccionado alguna fila
    if (selectedRow != -1) {
        // Obtener el valor de cada columna (0 a 3) de la fila seleccionada
        String valorColumna0 = jTable1.getValueAt(selectedRow, 2).toString();
        String valorColumna1 = jTable1.getValueAt(selectedRow, 4).toString();
        String valorColumna2 = jTable1.getValueAt(selectedRow, 6).toString();
        String valorColumna3 = jTable1.getValueAt(selectedRow, 7).toString();
        String valorColumna4 = jTable1.getValueAt(selectedRow, 5).toString();
        String valorColumna5 = jTable1.getValueAt(selectedRow, 3).toString();

        // Asignar los valores obtenidos a los JTextField correspondientes
        jTextFieldCategoria.setText(valorColumna0);
        jTextFieldProducto.setText(valorColumna1);
        jTextFieldDistribuidor.setText(valorColumna5);
        jTextFieldCosto.setText(valorColumna2);
        jTextFieldCantidad.setText(valorColumna4);
        jTextFieldPrecioVenta.setText(valorColumna3);
    }     
    

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTextFieldCostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCostoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCostoActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         
   // Obtén la fila seleccionada en jTable1
    int filaSeleccionada = jTable1.getSelectedRow();

    // Verifica si hay una fila seleccionada
    if (filaSeleccionada != -1) {
        // Obtén los valores de las columnas 'ID' y 'Producto' como referencia para eliminar
        String id = jTable1.getValueAt(filaSeleccionada, 0).toString(); // Asumiendo que 'ID' está en la columna 0
        String producto = jTable1.getValueAt(filaSeleccionada, 4).toString(); // Asumiendo que 'Producto' está en la columna 1

        // Establece la conexión a la base de datos
        Connection con = null;
        try {
            // Crea la conexión con la base de datos
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

            // Crea la consulta SQL para eliminar utilizando ID y Producto
            String sql = "DELETE FROM tabla1 WHERE ID = ? AND Producto = ?";

            // Prepara la consulta
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, id);         // Establece el valor de ID
            pst.setString(2, producto);   // Establece el valor de Producto

            // Ejecuta la consulta
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                // Remueve la fila de la tabla en la interfaz
                ((DefaultTableModel) jTable1.getModel()).removeRow(filaSeleccionada);
                JOptionPane.showMessageDialog(this, "Registro eliminado correctamente.");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el registro a eliminar. Verifica el ID y Producto.");
            }

            // Cierra el PreparedStatement
            pst.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error en la conexión a la base de datos: " + e.getMessage());
        } finally {
            // Cierra la conexión a la base de datos
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un registro para eliminar.");
    }
    
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
     
         // Obtiene el texto del campo de búsqueda
    String textoBusqueda = jTextField1.getText();

    // Obtiene el modelo de la tabla
    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

    // Configura el TableRowSorter para el modelo de la tabla
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
    jTable1.setRowSorter(sorter);

    // Aplica un filtro para buscar en todas las columnas
    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + textoBusqueda));

    sumarColumnas();
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextFieldCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCantidadActionPerformed

    private void jTextFieldCostoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCostoKeyReleased
     
         String texto = jTextFieldCosto.getText();
    
    // Eliminamos cualquier separador de miles previo (puntos en este caso)
    texto = texto.replace(".", "");
    
    // Verificamos si el texto es un número
    try {
        // Convertimos el texto a número entero
        long numero = Long.parseLong(texto);
        
        // Formateamos el número con puntos como separadores de miles
        DecimalFormat formateador = new DecimalFormat("#,###");
        DecimalFormatSymbols simbolos = formateador.getDecimalFormatSymbols();
        simbolos.setGroupingSeparator('.');
        formateador.setDecimalFormatSymbols(simbolos);

        // Actualizamos el contenido del JTextField con el número formateado
        String textoFormateado = formateador.format(numero);
        jTextFieldCosto.setText(textoFormateado);
    } catch (NumberFormatException e) {
        // En caso de que el texto no sea un número, no hacemos nada
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCostoKeyReleased

    private void jTextFieldPrecioVentaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPrecioVentaKeyReleased
            
          String texto = jTextFieldPrecioVenta.getText();
    
    // Eliminamos cualquier separador de miles previo (puntos en este caso)
    texto = texto.replace(".", "");
    
    // Verificamos si el texto es un número
    try {
        // Convertimos el texto a número entero
        long numero = Long.parseLong(texto);
        
        // Formateamos el número con puntos como separadores de miles
        DecimalFormat formateador = new DecimalFormat("#,###");
        DecimalFormatSymbols simbolos = formateador.getDecimalFormatSymbols();
        simbolos.setGroupingSeparator('.');
        formateador.setDecimalFormatSymbols(simbolos);

        // Actualizamos el contenido del JTextField con el número formateado
        String textoFormateado = formateador.format(numero);
        jTextFieldPrecioVenta.setText(textoFormateado);
    } catch (NumberFormatException e) {
        // En caso de que el texto no sea un número, no hacemos nada
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrecioVentaKeyReleased

    private void jTextFieldDistribuidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDistribuidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDistribuidorActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        recalcularTotalesYActualizarBD();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    public void sumarColumnas(){
    
        sumarColumnaCantidad();
        sumarColumnaCostoUnitario();
        sumarColumnaTotalVenta();
        
       
    }
    
    
public void sumarColumnaTotalVenta() {
    double totalVenta = 0.0;

    // Iterar sobre las filas de la tabla
    for (int i = 0; i < jTable1.getRowCount(); i++) {
        // Obtener el valor de la columna Total_Venta (índice 9)
        String totalVentaStr = jTable1.getValueAt(i, 9).toString();

        // Reemplazar puntos y comas para convertir a número
        totalVentaStr = totalVentaStr.replace(".", "").replace(",", ".");
        try {
            double totalVentaValor = Double.parseDouble(totalVentaStr);
            totalVenta += totalVentaValor;
        } catch (NumberFormatException e) {
            // Manejo de errores si el valor no se puede convertir
            e.printStackTrace();
        }
    }

    // Mostrar el resultado en jLabel3 con formato de miles
    jLabel3.setText(" Promedio Total Ventas : " + String.format("%,.0f", totalVenta).replace(",", "."));
}

    
    public void sumarColumnaCantidad() {
    
       int totalCantidad = 0;

    // Iterar sobre las filas de la tabla
    for (int i = 0; i < jTable1.getRowCount(); i++) {
        // Obtener el valor de la columna Cantidad (índice 3)
        String cantidadStr = jTable1.getValueAt(i, 5).toString();
        
        // Eliminar los puntos de miles y convertir a entero
        cantidadStr = cantidadStr.replace(".", "");
        int cantidad = Integer.parseInt(cantidadStr);
        
        // Sumar el valor
        totalCantidad += cantidad;
    }

    // Mostrar el resultado en jLabel4 con formato de miles
    jLabel4.setText("Cantidad Productos: "+ String.format("%,d ",totalCantidad).replace(",", "."));

}
    
    public void sumarColumnaCostoUnitario() {
    
          int totalCostoUnitario = 0;

    // Iterar sobre las filas de la tabla
    for (int i = 0; i < jTable1.getRowCount(); i++) {
        // Obtener el valor de la columna Costo_Unitario (índice 4)
        String costoStr = jTable1.getValueAt(i, 8).toString();

        // Eliminar los puntos de miles y convertir a entero
        costoStr = costoStr.replace(".", "");
        int costo = Integer.parseInt(costoStr);

        // Sumar el valor
        totalCostoUnitario += costo;
    }

    // Mostrar el resultado en jLabel5 con formato de miles
    jLabel5.setText("Total Gastos: "+ String.format("%,d", totalCostoUnitario).replace(",", "."));

}

    
 
    
    
    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Papeleria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Papeleria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldCantidad;
    private javax.swing.JTextField jTextFieldCategoria;
    private javax.swing.JTextField jTextFieldCosto;
    private javax.swing.JTextField jTextFieldDistribuidor;
    private javax.swing.JTextField jTextFieldPrecioVenta;
    private javax.swing.JTextField jTextFieldProducto;
    // End of variables declaration//GEN-END:variables
}
