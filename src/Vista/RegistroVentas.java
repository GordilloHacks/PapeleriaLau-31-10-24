/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;


import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Andres Gordillo
 */
public class RegistroVentas extends javax.swing.JFrame {

    /**
     * Creates new form RegistroVentas
     */
    public RegistroVentas() {
        initComponents();
        setLocationRelativeTo(null);
         Data(jLabel2);
         mostrarDatosEnTabla();
         TablaDatosVentas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTextField6 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        jLabel1.setText("Registro de ventas diarias");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control Registro:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jTextField2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Categoria:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jTextField3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Producto:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cantidad:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });

        jTextField5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Precio_Venta:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField5KeyReleased(evt);
            }
        });

        jTextPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalle:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        jTextField6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tipo_Pago:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField6KeyReleased(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Denominacion", "Cantidad", "Total", "inicial", "Total"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTextField1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar dato:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Hora&Fecha");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estadistica Panel:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 0));
        jLabel3.setText("Total Venta:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("Total Productos:");

        jButton1.setBackground(new java.awt.Color(102, 255, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Vender");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 153, 255));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Actualizar / agregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 102, 102));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabla venta:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jPanel3.setForeground(new java.awt.Color(51, 51, 51));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Categoria", "Producto", "Tipo_Pago", "Cantidad", "Total_Venta", "Descripcion"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabla productos:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(51, 51, 51));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Categoria", "Producto", "Cantidad", "Total_Venta", "Descripcion"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("Calendario Ventas");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Total Cantidad:");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(118, 118, 118)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(144, 144, 144)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 23, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel2)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(9, 9, 9)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9))
        );

        jPanel2.getAccessibleContext().setAccessibleName("Panel estadistica:");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
              
    // Variables para almacenar los valores de los campos
    String fecha = jLabel2.getText();        // Obtiene la fecha desde jLabel2
    String categoria = jTextField2.getText();  // Campo de texto para la categoría
     String TipoPago = jTextField6.getText();  // Campo de texto para la TipoPago
    String producto = jTextField3.getText();    // Campo de texto para el producto
    String cantidad = jTextField4.getText();    // Campo de texto para la cantidad
    String precioVenta = jTextField5.getText();  // Campo de texto para el precio de venta
    String descripcion = jTextPane1.getText();  // Campo de texto para la descripción

    // Verificar que los campos necesarios no estén vacíos
    if (fecha.isEmpty() || categoria.isEmpty() || producto.isEmpty() || TipoPago.isEmpty() || cantidad.isEmpty() || precioVenta.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Por favor complete todos los campos.");
        return;
    }

    // Calcular el total de la venta multiplicando cantidad por el precio de venta
    double cantidadVenta = Double.parseDouble(cantidad);
    double precio = Double.parseDouble(precioVenta);
    double totalVenta = cantidadVenta * precio;

    // Formatear el total de la venta con punto decimal en lugar de coma
    String totalVentaFormateado = String.format(Locale.US, "%.3f", totalVenta);

    // Mostrar cuadro de confirmación antes de guardar los datos
    int respuesta = JOptionPane.showConfirmDialog(null, 
            "¿Desea guardar este registro?\n\n" +
            "Fecha: " + fecha + "\n" +
            "Categoría: " + categoria + "\n" +
            "Producto: " + producto + "\n" +
            "TipoPago: " + TipoPago + "\n" +
            "Cantidad: " + cantidad + "\n" +
            "Precio de Venta: " + precioVenta + "\n" +
            "Descripción: " + descripcion + "\n" +
            "Total Venta: " + totalVentaFormateado, 
            "Confirmar Guardado", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

    // Si el usuario elige "Sí", se procede con el guardado
    if (respuesta == JOptionPane.YES_OPTION) {
        Connection con = null;
        PreparedStatement ps = null;

        try {
            // Conexión a la base de datos
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

            // Sentencia SQL para insertar los valores en la tabla 'tablaventas'
            String sql = "INSERT INTO tablaventas (Fecha, Categoria, Producto, 	Tipo_Pago, Cantidad, Precio_Venta, Descripcion, Total_Venta) VALUES (? ,?, ?, ?, ?, ?, ?, ?)";
            ps = (PreparedStatement) con.prepareStatement(sql);

            // Asignar los valores a los parámetros de la consulta
            ps.setString(1, fecha);
            ps.setString(2, categoria);
            ps.setString(3, producto);
            ps.setString(4, TipoPago);
            ps.setString(5, cantidad);
            ps.setString(6, precioVenta);
            ps.setString(7, descripcion);
            ps.setString(8, totalVentaFormateado);  // Insertar el total de la venta formateado con punto decimal

            // Ejecutar la inserción
            int filasInsertadas = ps.executeUpdate();
            
            if (filasInsertadas > 0) {
                JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
                // Actualizar el inventario después de la venta
                ActualizarInventario(producto, Integer.parseInt(cantidad));
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al guardar los datos: " + e.getMessage());
        } finally {
            // Cerrar los recursos
            try {
                if (ps != null) ps.close();
                if (con != null) con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        TablaDatosVentas();  // Mostrar los datos de la venta en jTable2
        MostrarInventario();
        
         // Aplicar el renderizado personalizado para la columna "Cantidad"
    jTable3.getColumnModel().getColumn(2).setCellRenderer((TableCellRenderer) new CustomRenderer());

    } else {
        // El usuario seleccionó "No", no se guarda el registro
        JOptionPane.showMessageDialog(null, "El registro no ha sido guardado.");
    }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    

    public void MostrarInventario() {
        System.out.println("MostrarInventario");
    // Definimos las columnas que se mostrarán en el jTable3
    String[] columnas = {"Categoria", "Producto","Cantidad", "Precio_Venta", "Descripcion"};
    DefaultTableModel modeloTabla = new DefaultTableModel(null, columnas);

    Connection con = null;
    Statement st = null;
    ResultSet rs = null;

    try {
        // Conexión a la base de datos
        con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

        // Consulta SQL para obtener los datos de la tabla 'tabla1'
        String sql = "SELECT Categoria, Producto , Cantidad, Precio_Venta, Descripcion FROM tabla1";
        st = (Statement) con.createStatement();
        rs = st.executeQuery(sql);

        // Recorremos los resultados de la consulta
        while (rs.next()) {
     
            String categoria = rs.getString("Categoria");
            String producto = rs.getString("Producto");
            String cantidad = rs.getString("Cantidad");
            String precioVenta = rs.getString("Precio_Venta");
            String descripcion = rs.getString("Descripcion");

            // Añadir la fila al modelo de tabla
            String[] fila = {categoria, producto, cantidad, precioVenta, descripcion};
            modeloTabla.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos del inventario: " + e.getMessage());
    } finally {
        // Cerrar los recursos
        try {
            if (rs != null) rs.close();
            if (st != null) st.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Finalmente, establecer el modelo de la tabla en jTable3
    jTable3.setModel(modeloTabla);
}

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

   // Obtener los datos de los campos
    String categoria = jTextField2.getText();
    String cantidad = jTextField4.getText();
    String producto = jTextField3.getText();  // Nombre del producto para buscar y actualizar
    String precioVenta = jTextField5.getText();
    String detalle = jTextPane1.getText();
    
    // Actualizar la base de datos basado en el nombre del producto
    actualizarDatosEnBaseDeDatosPorProducto(producto, categoria, cantidad, precioVenta, detalle);
    
    // Refrescar las tablas
    TablaDatosVentas();  // Refresca jTable3
    MostrarInventario();
    
     // Aplicar el renderizado personalizado para la columna "Cantidad"
    jTable3.getColumnModel().getColumn(2).setCellRenderer((TableCellRenderer) new CustomRenderer());

    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void actualizarDatosEnBaseDeDatosPorProducto(String producto, String categoria, String cantidad, String precioVenta, String detalle) {
    Connection conn = null;
    PreparedStatement pstmt = null;

    try {
        // Establecer conexión con la base de datos
        conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

        // Consulta SQL para actualizar los datos basados en el nombre del producto
        String sql = "UPDATE tabla1 SET Categoria = ?, Cantidad = ?, Precio_Venta = ?, Descripcion = ? WHERE Producto = ?"; // Asegúrate de que 'Descripcion' sea el nombre correcto

        // Crear un PreparedStatement
        pstmt = (PreparedStatement) conn.prepareStatement(sql);
        pstmt.setString(1, categoria);
        pstmt.setString(2, cantidad);
        pstmt.setString(3, precioVenta);
        pstmt.setString(4, detalle);  // Ajusta si el nombre de la columna es correcto
        pstmt.setString(5, producto);  // Usamos el nombre del producto como clave

        // Ejecutar la actualización
        pstmt.executeUpdate();

    } catch (SQLException e) {
        e.printStackTrace();  // Manejar errores de SQL
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


private String calcularTotalVenta(String cantidadStr, String precioVentaStr) {
    try {
        // Parsear cantidad y precio de venta
        int cantidad = Integer.parseInt(cantidadStr);
        double precioVenta = Double.parseDouble(precioVentaStr.replace(".", "").replace(",", "."));

        // Calcular el total de venta
        double totalVenta = cantidad * precioVenta;

        // Formatear el total de venta en miles sin decimales cuando no son necesarios
        return String.format("%,.0f", totalVenta).replace(",", ".");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error al calcular el total de venta: " + e.getMessage());
        return "0"; // Valor por defecto en caso de error
    }
}
    
public void ActualizarInventario(String producto, int cantidadVendida) {
    Connection con = null;
    PreparedStatement ps = null;

    try {
        // Conexión a la base de datos
        con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");

        // Consulta para actualizar la cantidad en la tabla 'tabla1'
        String sql = "UPDATE tabla1 SET Cantidad = Cantidad - ? WHERE Producto = ?";
        ps = (PreparedStatement) con.prepareStatement(sql);

        // Asignar los valores a los parámetros
        ps.setInt(1, cantidadVendida);
        ps.setString(2, producto);

        // Ejecutar la actualización
        int filasActualizadas = ps.executeUpdate();

        if (filasActualizadas > 0) {
            System.out.println("Inventario actualizado correctamente.");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al actualizar el inventario: " + e.getMessage());
    } finally {
        // Cerrar los recursos
        try {
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
    
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
                  // Obtiene el texto del campo de búsqueda
    String textoBusqueda = jTextField1.getText();

    // Obtiene el modelo de la tabla
    DefaultTableModel modelo2 = (DefaultTableModel) jTable2.getModel();
    DefaultTableModel modelo = (DefaultTableModel) jTable3.getModel();
     

    // Configura el TableRowSorter para el modelo de la tabla
    
    TableRowSorter<DefaultTableModel> sorter2 = new TableRowSorter<>(modelo2);
    jTable2.setRowSorter(sorter2);
    
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
    jTable3.setRowSorter(sorter);

    // Aplica un filtro para buscar en todas las columnas
    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + textoBusqueda));
    sorter2.setRowFilter(RowFilter.regexFilter("(?i)" + textoBusqueda));

    sumarColumnas();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        
       
    int selectedRow = jTable2.getSelectedRow();

    // Verificar si se ha seleccionado alguna fila
    if (selectedRow != -1) {
        // Obtener el valor de cada columna (0 a 3) de la fila seleccionada
        String valorColumna1 = jTable2.getValueAt(selectedRow, 2).toString();
        String valorColumna2 = jTable2.getValueAt(selectedRow, 3).toString();
        String valorColumna3 = jTable2.getValueAt(selectedRow, 4).toString();
        String valorColumna4 = jTable2.getValueAt(selectedRow, 5).toString();
        String valorColumna5 = jTable2.getValueAt(selectedRow, 6).toString();
        String valorColumna6 = jTable2.getValueAt(selectedRow, 8).toString();

        // Asignar los valores obtenidos a los JTextField correspondientes
        jTextField2.setText(valorColumna1);
        jTextField3.setText(valorColumna2);
        jTextField4.setText(valorColumna4);
        jTextField5.setText(valorColumna5);
        jTextField6.setText(valorColumna3);
        jTextPane1.setText(valorColumna6);
    }    

    // Guardar el índice de la fila seleccionada antes de actualizar la tabla
    int rowToRestore = jTable2.getSelectedRow();

    // Actualizar datos en la tabla
    TablaDatosVentas();

    // Restaurar la fila seleccionada después de actualizar la tabla
    if (rowToRestore != -1) {
        jTable2.setRowSelectionInterval(rowToRestore, rowToRestore);
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
      int selectedRow = jTable3.getSelectedRow();

    // Verificar si se ha seleccionado alguna fila
    if (selectedRow != -1) {
        // Obtener el valor de cada columna (0 a 3) de la fila seleccionada
        String valorColumna0 = jTable3.getValueAt(selectedRow, 0).toString();
        String valorColumna1 = jTable3.getValueAt(selectedRow, 1).toString();
        String valorColumna2 = jTable3.getValueAt(selectedRow, 2).toString();
        String valorColumna3 = jTable3.getValueAt(selectedRow, 3).toString();
        String valorColumna4 = jTable3.getValueAt(selectedRow, 4).toString();
 
        // Asignar los valores obtenidos a los JTextField correspondientes
        jTextField2.setText(valorColumna0);
        jTextField3.setText(valorColumna1);
        jTextField4.setText(valorColumna2);
        jTextField5.setText(valorColumna3);
        jTextField6.setText("");
        jTextPane1.setText(valorColumna4);
     
    }    
    
     sumarTotalVenta();
    // TODO add your handling code here:
    }//GEN-LAST:event_jTable3MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    // Verificar si se ha seleccionado un registro en la tabla de ventas (jTable2)
    int filaSeleccionada = jTable2.getSelectedRow();
    
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(null, "Por favor seleccione un registro de la tabla de ventas.");
        return;
    }

    // Preguntar si la eliminación es por pérdida o por devolución
    Object[] opciones = {"Devolución", "Pérdida"};
    int opcionSeleccionada = JOptionPane.showOptionDialog(
        null, 
        "¿Desea eliminar el registro por pérdida o devolución del producto?", 
        "Confirmación de eliminación", 
        JOptionPane.YES_NO_OPTION, 
        JOptionPane.QUESTION_MESSAGE, 
        null, 
        opciones, 
        opciones[0]
    );

    // Obtener los valores de la tabla seleccionada
    String producto = jTable2.getValueAt(filaSeleccionada, 3).toString(); // Producto en la columna 3
    int idVenta = 0; // Inicializar ID de venta

    try {
        idVenta = Integer.parseInt(jTable2.getValueAt(filaSeleccionada, 0).toString()); // ID en la columna 0
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error al obtener la ID de la venta: " + e.getMessage());
        return;
    }

    Connection con = null;
    PreparedStatement ps = null;

    // Si selecciona devolución, se ajusta el inventario
    if (opcionSeleccionada == 0) { // 0 es para "Devolución"
        boolean productoEncontrado = false;
        int cantidadVenta = 0; // Inicializar cantidad de venta

        try {
            cantidadVenta = Integer.parseInt(jTable2.getValueAt(filaSeleccionada, 4).toString()); // Cantidad en la columna 4
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error al obtener la cantidad de venta: " + e.getMessage());
            return;
        }

        int cantidadDevolucion = cantidadVenta; // Valor por defecto

        // Si la cantidad de venta es mayor a 1, preguntar cuántas unidades se devuelven
        if (cantidadVenta > 1) {
            String inputCantidad = JOptionPane.showInputDialog(null, "Ingrese cuántas unidades se devuelven:", "Devolución", JOptionPane.QUESTION_MESSAGE);
            if (inputCantidad != null && !inputCantidad.isEmpty()) {
                try {
                    cantidadDevolucion = Integer.parseInt(inputCantidad);
                    if (cantidadDevolucion > cantidadVenta || cantidadDevolucion <= 0) {
                        JOptionPane.showMessageDialog(null, "Cantidad de devolución inválida.");
                        return;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Ingrese un número válido.");
                    return;
                }
            } else {
                return; // Cancelar la operación si no se ingresa un valor válido
            }
        }

        // Buscar el producto en la tabla de inventario (jTable3)
        for (int i = 0; i < jTable3.getRowCount(); i++) {
            String productoInventario = jTable3.getValueAt(i, 1).toString(); // Asumimos que el producto está en la columna 1

            if (productoInventario.equals(producto)) {
                // Obtener la cantidad actual en inventario
                int cantidadInventario = 0; // Inicializar cantidad de inventario
                try {
                    cantidadInventario = Integer.parseInt(jTable3.getValueAt(i, 2).toString()); // Cantidad en la columna 2
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Error al obtener la cantidad en inventario: " + e.getMessage());
                    return;
                }
                // Sumar la cantidad devuelta a la cantidad en inventario
                int nuevaCantidad = cantidadInventario + cantidadDevolucion;
                jTable3.setValueAt(nuevaCantidad, i, 2); // Actualizar el inventario en la tabla

                // Actualizar también la base de datos del inventario
                try {
                    con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");
                    String sql = "UPDATE tabla1 SET Cantidad = ? WHERE Producto = ?";
                    ps = (PreparedStatement) con.prepareStatement(sql);
                    ps.setInt(1, nuevaCantidad);
                    ps.setString(2, producto);
                    ps.executeUpdate();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el inventario: " + e.getMessage());
                } finally {
                    try {
                        if (ps != null) ps.close();
                        if (con != null) con.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }

                productoEncontrado = true;
                break;
            }
        }

        if (!productoEncontrado) {
            JOptionPane.showMessageDialog(null, "No se encontró el producto en el inventario.");
            return;
        }

        // Ajustar la cantidad en la tabla de ventas si se devolvió una cantidad parcial
        if (cantidadDevolucion < cantidadVenta) {
            int nuevaCantidadVenta = cantidadVenta - cantidadDevolucion;
            jTable2.setValueAt(nuevaCantidadVenta, filaSeleccionada, 4); // Actualizar cantidad en la tabla
            try {
                con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");
                String sql = "UPDATE tablaventas SET Cantidad = ? WHERE IDs = ? AND Producto = ?";
                ps = (PreparedStatement) con.prepareStatement(sql);
                ps.setInt(1, nuevaCantidadVenta);
                ps.setInt(2, idVenta);
                ps.setString(3, producto);
                ps.executeUpdate();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al actualizar la venta: " + e.getMessage());
            } finally {
                try {
                    if (ps != null) ps.close();
                    if (con != null) con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            return; // Terminar aquí si no se elimina toda la venta
        }
    }

    // Si selecciona pérdida, eliminar el registro de la tabla de ventas solo por ID y nombre
    if (opcionSeleccionada == 1) { // 1 es para "Pérdida"
        try {
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/base_papeleria", "root", "");
            String sql = "DELETE FROM tablaventas WHERE IDs = ? AND Producto = ?";
            ps = (PreparedStatement) con.prepareStatement(sql);
            ps.setInt(1, idVenta);
            ps.setString(2, producto);
            ps.executeUpdate();

            // Eliminar el registro de la tabla visualmente en jTable2
            ((DefaultTableModel) jTable2.getModel()).removeRow(filaSeleccionada);
            
            JOptionPane.showMessageDialog(null, "Registro eliminado correctamente.");
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al eliminar el registro: " + e.getMessage());
        } finally {
            try {
                if (ps != null) ps.close();
                if (con != null) con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Actualizar las tablas en la interfaz (inventario y ventas)
    MostrarInventario(); // Actualizar jTable3
    TablaDatosVentas(); // Actualizar jTable2
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyReleased

         String texto = jTextField5.getText();
    
    // Eliminamos cualquier separador de miles previo (puntos en este caso)
    texto = texto.replace(".", "");
    
    // Verificamos si el texto es un número
    try {
        // Convertimos el texto a número entero
        long numero = Long.parseLong(texto);
        
        // Formateamos el número con puntos como separadores de miles
        DecimalFormat formateador = new DecimalFormat("#,###");
        DecimalFormatSymbols simbolos = formateador.getDecimalFormatSymbols();
        simbolos.setGroupingSeparator('.');
        formateador.setDecimalFormatSymbols(simbolos);

        // Actualizamos el contenido del JTextField con el número formateado
        String textoFormateado = formateador.format(numero);
        jTextField5.setText(textoFormateado);
    } catch (NumberFormatException e) {
        // En caso de que el texto no sea un número, no hacemos nada
    }        // TODO add your handling code here:
    sumarTotalVenta();
    }//GEN-LAST:event_jTextField5KeyReleased

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
      sumarTotalVenta();  // TODO add your handling code here:
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        sumarTotalVenta();        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4KeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
         // Crear un JDateChooser para permitir al usuario seleccionar una fecha
    JDateChooser dateChooser = new JDateChooser();
    dateChooser.setDateFormatString("dd/MM/yyyy"); // Define el formato de la fecha

    // Mostrar un diálogo modal con el calendario
    int input = JOptionPane.showConfirmDialog(null, dateChooser, "Seleccione una fecha", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (input == JOptionPane.OK_OPTION) {
        // Obtener la fecha seleccionada
        Date fechaSeleccionada = dateChooser.getDate();

        // Formatear la fecha seleccionada al formato que usa tu base de datos (dd/MM/yyyy)
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String fechaFormateada = dateFormat.format(fechaSeleccionada);

        // Actualizar jLabel2 con la fecha seleccionada (si es necesario)
        jLabel2.setText(fechaFormateada);

        // Llamar a la función que carga las ventas filtrando por la fecha seleccionada
        cargarVentasPorFecha(fechaFormateada);  // Deberás ajustar esta función en base a tu implementación
    }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6KeyReleased

    // Función para cargar las ventas según la fecha seleccionada
public void cargarVentasPorFecha(String fecha) {
    // Definimos las columnas que se mostrarán en el jTable2
    String[] columnas = {"IDs", "Fecha", "Categoria", "Producto", "Tipo_Pago", "Cantidad", "Precio_Venta", "Total_Venta", "Descripcion"};
    DefaultTableModel modeloTabla = new DefaultTableModel(null, columnas);

    String url = "jdbc:mysql://localhost:3306/base_papeleria";
    String usuario = "root";
    String contraseña = "";

    // Consulta SQL para obtener los datos de la tabla 'tablaventas' que coinciden con la fecha seleccionada
    String sql = "SELECT IDs, Fecha, Categoria, Producto, Tipo_Pago , Cantidad, Precio_Venta, Total_Venta, Descripcion " +
                 "FROM tablaventas " +
                 "WHERE STR_TO_DATE(SUBSTRING_INDEX(Fecha, '|', -1), '%d/%m/%Y') = STR_TO_DATE(?, '%d/%m/%Y')";

    try (Connection con = (Connection) DriverManager.getConnection(url, usuario, contraseña);
         PreparedStatement pst = (PreparedStatement) con.prepareStatement(sql)) {

        // Establecemos el parámetro de fecha usando la fecha seleccionada
        pst.setString(1, fecha);

        try (ResultSet rs = pst.executeQuery()) {
            while (rs.next()) {
                // Obtener los datos de cada columna
                String id = rs.getString("IDs");
                String fechaVenta = rs.getString("Fecha");
                String categoria = rs.getString("Categoria");
                String producto = rs.getString("Producto");
                String TipoPago = rs.getString("Tipo_Pago");
                String cantidad = rs.getString("Cantidad");
                String precioVenta = rs.getString("Precio_Venta");
                String totalVenta = rs.getString("Total_Venta");
                String descripcion = rs.getString("Descripcion");

                // Añadir la fila al modelo de tabla
                String[] fila = {id, fechaVenta, categoria, producto, cantidad, precioVenta, totalVenta, descripcion};
                modeloTabla.addRow(fila);
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + e.getMessage());
    }

    // Establecer el modelo de la tabla en jTable2
    jTable2.setModel(modeloTabla);
    sumarColumnas(); // Llama a la función sumarColumnas (si es necesario)
}
    
  public void mostrarDatosEnTabla() {
    // Definimos solo las columnas requeridas
    String[] columnas = { "Categoria", "Producto", "Cantidad", "Precio_Venta", "Descripcion"};
    DefaultTableModel modeloTabla = new DefaultTableModel(null, columnas);

    String url = "jdbc:mysql://localhost:3306/base_papeleria";
    String user = "root";
    String password = "";

    try (Connection con = (Connection) DriverManager.getConnection(url, user, password);
         Statement st = (Statement) con.createStatement();
         ResultSet rs = st.executeQuery("SELECT Categoria, Producto, Cantidad, Precio_Venta, Descripcion FROM tabla1")) {

        // Recorremos los resultados de la consulta
        while (rs.next()) {
            String categoria = rs.getString("Categoria");
            String producto = rs.getString("Producto");
            String cantidad = rs.getString("Cantidad");
            String precioVenta = rs.getString("Precio_Venta");
            String descripcion = rs.getString("Descripcion");

            // Mostrar los datos en la consola para verificar
            System.out.println(", Categoria: " + categoria + ", Producto: " + producto + 
                               ", Cantidad: " + cantidad + ", Precio_Venta: " + precioVenta + ", Descripcion: " + descripcion);

            // Añadir la fila al modelo de tabla con solo los campos requeridos
            String[] fila = {categoria, producto, cantidad, precioVenta, descripcion};
            modeloTabla.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + e.getMessage());
    }

    // Finalmente, establecer el modelo de la tabla después de cargar todos los datos
    jTable3.setModel(modeloTabla);
    
    // Aplicar el renderizado personalizado para la columna "Cantidad"
    jTable3.getColumnModel().getColumn(2).setCellRenderer((TableCellRenderer) new CustomRenderer());

    sumarColumnas();
  
}

// Clase para el renderizado personalizado basado en la cantidad
class CustomRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        // Llamamos al método original para obtener el componente de celda
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        // Verificamos que el valor sea numérico antes de aplicar el formato
        if (value != null) {
            try {
                int cantidad = Integer.parseInt(value.toString());

                // Aplicamos el color según las condiciones
                if (cantidad < 5) {
                    c.setBackground(Color.RED);  // Menos de 5 en rojo
                } else if (cantidad >= 5 && cantidad <= 10) {
                    c.setBackground(Color.ORANGE);  // Entre 5 y 10 en naranja
                } else {
                    c.setBackground(Color.WHITE);  // Más de 10, color normal (blanco)
                }
            } catch (NumberFormatException e) {
                // Manejar el caso en que el valor no sea un número
                c.setBackground(Color.WHITE);
            }
        }
        return c;
    }
}

   
public void TablaDatosVentas() {
    System.out.println("TablaVentas");
    // Definimos las columnas que se mostrarán en el jTable2
    String[] columnas = {"IDs", "Fecha", "Categoria", "Producto", "Tipo_Pago", "Cantidad", "Precio_Venta", "Total_Venta", "Descripcion"};
    DefaultTableModel modeloTabla = new DefaultTableModel(null, columnas);

    String url = "jdbc:mysql://localhost:3306/base_papeleria";
    String usuario = "root";
    String contraseña = "";

    // Obtener la fecha desde el jLabel2
    String fechaHoraActual = jLabel2.getText();  // Ejemplo de formato: "07:31:05 p. m. | 10/10/2024"

    // Extraemos solo la parte de la fecha (después del "|")
    String[] partes = fechaHoraActual.split("\\|");
    String fechaActual = partes[1].trim();  // Esto debería contener solo "10/10/2024"

    // Consulta SQL para obtener los datos de la tabla 'tablaventas' que coinciden con la fecha actual
    String sql = "SELECT IDs, Fecha, Categoria, Producto, Tipo_Pago, Cantidad, Precio_Venta, Total_Venta, Descripcion " +
                 "FROM tablaventas " +
                 "WHERE STR_TO_DATE(SUBSTRING_INDEX(Fecha, '|', -1), '%d/%m/%Y') = STR_TO_DATE(?, '%d/%m/%Y')";

    // Uso de try-with-resources para asegurar el cierre automático de recursos
    try (Connection con = (Connection) DriverManager.getConnection(url, usuario, contraseña);
         PreparedStatement pst = (PreparedStatement) con.prepareStatement(sql)) {

        // Establecemos el parámetro de fecha usando la fecha obtenida de jLabel2
        pst.setString(1, fechaActual);

        try (ResultSet rs = pst.executeQuery()) {
            // Recorremos los resultados de la consulta
            while (rs.next()) {
                // Obtener los datos de cada columna
                String id = rs.getString("IDs");
                String fecha = rs.getString("Fecha");
                String categoria = rs.getString("Categoria");
                String producto = rs.getString("Producto");
                 String Tipo_Pago = rs.getString("Tipo_Pago");
                String cantidad = rs.getString("Cantidad");
                String precioVenta = rs.getString("Precio_Venta");
                String totalVenta = rs.getString("Total_Venta");
                String descripcion = rs.getString("Descripcion");

                // Añadir la fila al modelo de tabla
                String[] fila = {id, fecha, categoria, producto, Tipo_Pago, cantidad, precioVenta, totalVenta, descripcion};
                modeloTabla.addRow(fila);
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + e.getMessage());
    }

    // Establecer el modelo de la tabla en jTable2
    jTable2.setModel(modeloTabla);

     sumarColumnas();
}


        
       public void sumarColumnas(){
           System.out.println("SumarColumnas");
        sumarColumnaCantidad();
        sumarColumnaTotalVenta();
        sumarTotalVenta();
       
    }   
       
    public void sumarColumnaTotalVenta() {
             
               int totalVenta = 0;  // Cambiamos a `int` ya que no se manejarán decimales

    // Iterar sobre las filas de la tabla
    for (int i = 0; i < jTable2.getRowCount(); i++) {
        // Obtener el valor de la columna Total_Venta (índice 5, que corresponde a Total_Venta)
        String totalVentaStr = jTable2.getValueAt(i, 7).toString();
        
        // Reemplazar puntos y comas para convertir a número
        totalVentaStr = totalVentaStr.replace(".", "").replace(",", ".");
        
        try {
            // Convertir el valor a double y luego a int si se redondea
            int totalVentaValor = (int) Double.parseDouble(totalVentaStr);
            totalVenta += totalVentaValor;  // Acumular el total
        } catch (NumberFormatException e) {
            // Manejo de errores si el valor no se puede convertir
            e.printStackTrace();
        }
    }

    // Mostrar el resultado en jLabel3 con formato de miles (sin decimales)
    jLabel3.setText("Total Ventas: " + String.format("%,d", totalVenta).replace(",", "."));

              
          }

    
    public void sumarColumnaCantidad() {
    
       int totalCantidad = 0;

    // Iterar sobre las filas de la tabla
    for (int i = 0; i < jTable3.getRowCount(); i++) {
        // Obtener el valor de la columna Cantidad (índice 3)
        String cantidadStr = jTable3.getValueAt(i, 2).toString();
        
        // Eliminar los puntos de miles y convertir a entero
        cantidadStr = cantidadStr.replace(".", "");
        int cantidad = Integer.parseInt(cantidadStr);
        
        // Sumar el valor
        totalCantidad += cantidad;
    }

    // Mostrar el resultado en jLabel4 con formato de miles
    jLabel4.setText("Cantidad Productos: "+ String.format("%,d ",totalCantidad).replace(",", "."));

}
  
   public void sumarTotalVenta() {
       
    // Mostrar valores antes de procesar para depuración
    System.out.println("Cantidad: " + jTextField4.getText() + " | Precio Venta: " + jTextField5.getText());

    try {
        // Verificar si jTextField5 (Precio Venta) está vacío
        if (jTextField5.getText().trim().isEmpty()) {
            System.out.println("Error: El campo Precio Venta está vacío");
            jLabel5.setText("Precio Venta vacío");
            return;
        }

        // Verificar si jTextField4 (Cantidad) está vacío o no contiene solo números
        String cantidadStr = jTextField4.getText().trim();
        if (cantidadStr.isEmpty() || !cantidadStr.matches("\\d+")) {
            System.out.println("Error: El campo Cantidad no es válido o está vacío");
            jLabel5.setText("Cantidad vacía");
            return;
        }

        // Obtener y limpiar el valor de Precio Venta (eliminar puntos de miles)
        String precioVentaStr = jTextField5.getText().replace(".", "").trim();
        System.out.println("PrecioVenta sin puntos: " + precioVentaStr);

        // Convertir Precio Venta a double
        double precioVenta = Double.parseDouble(precioVentaStr);

        // Convertir Cantidad a int
        int cantidad = Integer.parseInt(cantidadStr);

        // Multiplicar Precio Venta por Cantidad
        double totalVenta = precioVenta * cantidad;

        // Formatear el resultado con puntos de miles
        String totalVentaFormateado = String.format("%,.0f", totalVenta); // Formato sin decimales para miles

        // Mostrar los valores en consola para depuración
        System.out.println("PrecioVenta: " + precioVenta + " | Cantidad: " + cantidad + " | TotalVenta: (" + totalVenta + ") --> " + totalVentaFormateado);

        // Mostrar el resultado en jLabel5 con el formato de miles
        jLabel5.setText("Total Cobro: "+totalVentaFormateado);
    } catch (NumberFormatException e) {
        // Manejar error en caso de que los campos no contengan números válidos
        System.out.println("Error: Formato de número inválido");
        jLabel5.setText("Error");
    }
}

    
      public static void Data(JLabel jLabel2) {
        // Crear un formateador de fecha y hora en formato de 12 horas con segundos
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm:ss a | dd/MM/yyyy");

        // Definir una tarea que actualiza el JLabel
        ActionListener actualizarHora = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener la hora y fecha actual del sistema
                LocalDateTime now = LocalDateTime.now();
                String formattedDateTime = now.format(formatter);

                // Actualizar el texto de jLabel2
                jLabel2.setText(formattedDateTime);
            }
        };

        // Crear un Timer que se dispare cada 1000 ms (1 segundo)
        Timer timer = new Timer(1000, actualizarHora);

        // Ejecutar inmediatamente la primera actualización
        actualizarHora.actionPerformed(null);

        // Iniciar el Timer
        timer.start();
    }
    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroVentas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
